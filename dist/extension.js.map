{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://debugging-process/webpack/bootstrap","webpack://debugging-process/webpack/runtime/define property getters","webpack://debugging-process/webpack/runtime/hasOwnProperty shorthand","webpack://debugging-process/webpack/runtime/make namespace object","webpack://debugging-process/external commonjs \"vscode\"","webpack://debugging-process/./src/extension.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"vscode\");","import * as vscode from 'vscode';\nexport function activate(context) {\n    const provider = new DebugViewProvider(context.extensionUri);\n    context.subscriptions.push(vscode.window.registerWebviewViewProvider(DebugViewProvider.viewType, provider));\n    //GRAPH\n    context.subscriptions.push(vscode.commands.registerCommand('extension.showD3Graph', (treeData = {}, activeNode = {}) => {\n        const panel = vscode.window.createWebviewPanel('d3Graph', 'D3 Graph', vscode.ViewColumn.One, {\n            enableScripts: true\n        });\n        panel.webview.html = getWebviewContent(panel.webview, context.extensionUri, treeData, activeNode);\n        panel.webview.onDidReceiveMessage(message => {\n            switch (message.command) {\n                case 'updateActiveNode':\n                    provider.receiveInformation(\"activeNode\", message.activeNode);\n                    //This closes the webview, but might not want it\n                    panel.dispose();\n                    break;\n            }\n        }, undefined, context.subscriptions);\n    }));\n}\nfunction getWebviewContent(webview, extensionUri, treeData, activeNode) {\n    const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(extensionUri, 'media', 'graph.js'));\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>D3 Directed Graph</title>\n        <style>\n            body {\n                margin: 0;\n                padding: 0;\n                overflow: hidden;\n            }\n            #graph {\n                width: 100vw;\n                height: 100vh;\n                border: 1px solid black;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"graph\">Loading...</div>\n        <script type=\"module\">\n\t\t\tconst treeData = ${JSON.stringify(treeData)};\n\t\t\tconst activeNode = ${activeNode};\n\t\t\tconst vscode = acquireVsCodeApi();\n            import * as d3 from 'https://cdn.jsdelivr.net/npm/d3@7/+esm';\n\n            // Load the external script and call createGraph function\n            const script = document.createElement('script');\n            script.type = 'module';\n            script.src = '${scriptUri}';\n            document.body.appendChild(script);\n\n            script.onload = () => {\n                import('${scriptUri}').then(module => {\n                    module.createGraph(treeData, vscode, activeNode);\n                });\n            };\n        </script>\n    </body>\n    </html>`;\n}\nclass DebugViewProvider {\n    constructor(_extensionUri) {\n        this._extensionUri = _extensionUri;\n    }\n    resolveWebviewView(webviewView, context, _token) {\n        this._view = webviewView;\n        webviewView.webview.options = {\n            // Allow scripts in the webview\n            enableScripts: true,\n            localResourceRoots: [\n                this._extensionUri\n            ]\n        };\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n        webviewView.webview.onDidReceiveMessage(data => {\n            switch (data.type) {\n                case 'showGraph':\n                    {\n                        const treeData = data.treeData;\n                        const activeNode = data.activeNode;\n                        vscode.commands.executeCommand('extension.showD3Graph', treeData, activeNode);\n                        break;\n                    }\n            }\n        });\n    }\n    receiveInformation(command, data) {\n        var _a;\n        let info = { type: command, data: data };\n        (_a = this._view) === null || _a === void 0 ? void 0 : _a.webview.postMessage(info);\n    }\n    _getHtmlForWebview(webview) {\n        // Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\n        const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'main.js'));\n        const styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'reset.css'));\n        const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'vscode.css'));\n        const styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'main.css'));\n        // Use a nonce to only allow a specific script to be run.\n        const nonce = getNonce();\n        return `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading styles from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n\t\t\t\t\t(See the 'webview-sample' extension sample for img-src content security policy examples)\n\t\t\t\t-->\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\n\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n                <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleMainUri}\" rel=\"stylesheet\">\n\n\t\t\t\t<title>Debug</title>\n\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t<div class=\"new-bug\">\n\t\t\t\t\t<label for=\"new-bug\">New Bug:</label>\n\t\t\t\t\t<input type=\"text\" id=\"new-bug\" name=\"new-bug\" />\n\t\t\t\t\t<br/>\n\t\t\t\t\t<button class=\"add-color-button\">Start Session</button>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<hr/>\n\t\t\t\t<br/>\n\t\t\t\t<div class=\"new-attempt\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<b>Bug</b>: No text rendering on page.\n\t\t\t\t\t</p>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<label for=\"new-attempt\">Attempted Solution</label>\n\t\t\t\t\t<textarea name=\"attempt\" cols=\"40\" rows=\"5\">\n\t\t\t\t\t</textarea>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<button class=\"add-color-button\">Add ?Checkpoint?</button>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<hr/>\n\t\t\t\t<br/>\n\t\t\t\t<button class=\"show-tree-button\">Show D3 Graph</button>\n\t\t\t\t<br/>\n\t\t\t\t<ul class=\"color-list\">\n\t\t\t\t</ul>\n\t\t\t\t<br/>\n\t\t\t\t<hr/>\n\t\t\t\t<br/>\n\t\t\t\t<p>\n\t\t\t\t<b>Bug</b>: No text rendering on page.\n\t\t\t\t</p>\n\t\t\t\t<br/>\n\t\t\t\t<div class=\"attempted-solution\">\n\t\t\t\t\t<label for=\"attempt\">Attempted Solution</label>\n\t\t\t\t\t<textarea name=\"attempt\" cols=\"40\" rows=\"5\">Added print statements to the database call to check and see what data is being returned.?Should this be editable?\n\t\t\t\t\t</textarea>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<button class=\"meow-button\">Restore ?Checkpoint?</button>\n\t\t\t\t<button class=\"delete-checkpoint-button\">?Delete?</button>\n\t\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t</body>\n\t\t\t</html>`;\n    }\n}\nDebugViewProvider.viewType = 'debugPanel.panelView';\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\nexport function deactivate() { }\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","activate","context","provider","DebugViewProvider","extensionUri","subscriptions","push","registerWebviewViewProvider","viewType","registerCommand","treeData","activeNode","panel","createWebviewPanel","One","enableScripts","webview","html","scriptUri","asWebviewUri","joinPath","JSON","stringify","getWebviewContent","onDidReceiveMessage","message","command","receiveInformation","dispose","undefined","constructor","_extensionUri","this","resolveWebviewView","webviewView","_token","_view","options","localResourceRoots","_getHtmlForWebview","data","type","executeCommand","_a","info","postMessage","styleResetUri","styleVSCodeUri","styleMainUri","nonce","text","possible","i","charAt","Math","floor","random","getNonce","cspSource","deactivate"],"sourceRoot":""}